version: 2.1

orbs:
  slack: circleci/slack@4.12.1
  python: circleci/python@2.1.1
  gcp-cli: circleci/gcp-cli@3.1.1
  github-cli: circleci/github-cli@2.2.0

workflows:
  branch-test-and-verify:
    jobs:
      - pre-commit
      - tests:
          context:
            - llm_api_keys_circleci_context
            - circle_ci_fingerprint
      - publish-package:
          requires:
            - tests
          context:
            - circle_ci_fingerprint
            - martian-adapters
          filters:
            branches:
              only:
                - main
      - update-supported-models-gateways-docs:
          requires:
            - publish-package
          context:
            - circle_ci_fingerprint
            - martian-adapters
            - gh-token
          filters:
            branches:
              only:
                - main

  daily_record_job_workflow:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - daily_record_job

jobs:
  pre-commit:
    docker:
      - image: cimg/python:3.11.5
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: poetry
          args: --only pre-commit
          cache-version: pre-commit-v1
      - run:
          name: Create cache key
          command: |
            cp .pre-commit-config.yaml pre-commit-cache-key.txt
            python --version --version >> pre-commit-cache-key.txt
      - restore_cache:
          name: Restore pre-commit cache
          keys:
            - v1-pc-cache-{{ checksum "pre-commit-cache-key.txt" }}
      - run:
          name: Runs pre-commit
          command: SKIP=no-commit-to-branch poetry run pre-commit run --all-files
      - save_cache:
          name: Save pre-commit cache
          key: v1-pc-cache-{{ checksum "pre-commit-cache-key.txt" }}
          paths:
            - ~/.cache/pre-commit

  tests:
    parallelism: 10
    docker:
      - image: cimg/python:3.11.5
    steps:
      - add_ssh_keys:
          fingerprints:
            - $SSH_FINGERPRINT
      - checkout
      - run:
          name: update setuptools
          command: |
            poetry run pip install 'setuptools==71.0.0'
      - python/install-packages:
          pkg-manager: poetry
      - run:
          name: Run backend unit tests
          command: |
            ENABLE_CACHE=no poetry run pytest --block-network --record-mode=none --junitxml=test-results/junit.xml --log-cli-level=DEBUG

      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results

  publish-package:
    docker:
      - image: cimg/python:3.11.5
    steps:
      - add_ssh_keys:
          fingerprints:
            - $SSH_FINGERPRINT
      - checkout
      - run:
          name: Setup Poetry for private PyPI
          command: |
            poetry config pypi-token.pypi $PYPI_API_TOKEN
      - run:
          name: Publish package to PyPI
          command: poetry publish --build

  update-supported-models-gateways-docs:
    docker:
      - image: cimg/python:3.11.5
    steps:
      - add_ssh_keys:
          fingerprints:
            - $SSH_FINGERPRINT
            - SHA256:0BJJg6ZBTxTdqo9lc0WG0GlQgSNcxCI2CaOH37TAdXg
      - checkout
      - python/install-packages:
          pkg-manager: poetry

      # Install GitHub CLI
      - run:
          name: Install GitHub CLI
          command: |
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
      - run:
          name: Set up the gitbook docs repo
          command: |
            git clone git@github.com:withmartian/gitbook-docs.git ~/gitbook-docs
            cd ~/gitbook-docs
            git config --global user.name "circle-ci-bot"
            git config --global user.email "circle-ci-bot@withmartian.com"
            git checkout deploy
            git checkout -b update/circle-ci-${CIRCLE_BUILD_NUM}
            cd -
      - run:
          name: Check directory structure
          command: |
            echo "Current working directory:"
            pwd
            echo "Contents of home directory:"
            ls -R ~
            echo "Contents of gitbook-docs directory:"
            ls -R ~/gitbook-docs
      - run:
          name: Run doc update
          command: |
            poetry install
            poetry run pip install pandas
            poetry run python scripts/update_supported_models_gateway_docs.py ~/gitbook-docs/martian-model-router/model-gateway/supported-models-gateway.md
      - run:
          name: Push changes to github
          command: |
            cd ~/gitbook-docs
            git add --all
            git commit -m "Updated doc with newest models"
            git push --set-upstream origin update/circle-ci-${CIRCLE_BUILD_NUM}
            gh pr create --title "Doc update" --body "" --base deploy --head update/circle-ci-${CIRCLE_BUILD_NUM}
            gh pr merge -m $(gh pr list --limit 1 --json number --jq '.[0].number')

  daily_record_job:
    docker:
      - image: cimg/python:3.11.5
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: poetry
      - run:
          name: Run command with --record-mode=rewrite
          command: poetry run pytest --record-mode=rewrite
