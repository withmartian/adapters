interactions:
- request:
    body: '{"model": "meta-llama/Meta-Llama-3.1-405B-Instruct", "prompt": "Hi"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, br
      connection:
      - keep-alive
      content-length:
      - '68'
      content-type:
      - application/json
      host:
      - api.deepinfra.com
      user-agent:
      - AsyncOpenAI/Python 1.47.1
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.47.1
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.10
    method: POST
    uri: https://api.deepinfra.com/v1/openai/completions
  response:
    body:
      string: '{"id":"cmpl-e0fb36d0ec544e64a9a5703044ee052f","object":"text_completion","created":1734145901,"model":"meta-llama/Meta-Llama-3.1-405B-Instruct","choices":[{"index":0,"text":"<|start_header_id|>(low_depression,
        self.exposure_model_usa.processed_depression_data[''std_ratio'']),\n                    self.exposure_model_usa.calibrate_depression_f(\n                        self.exposure_model_usa.processed_depression_data[''mean_ratio''],\n                        self.exposure_model_usa.processed_depression_data[''std_ratio''],\n                        self.exposure_model_usa.processed_depression_data[''lambda_'']\n                    )\n                )\n            ]\n        )\n        \"\"\"\n        Allows
        for non-synthetic exposure generation, and instead reads from a file.\n        If
        using external files, create a list of dictionaries that are passed as a \n        list
        of lists of exposures to the individual creation function.\n        These
        dictionaries should have a key for each exposure type.\n        :param exposures:
        a list of dictionaries, with keys of exposure type and\n        values as
        the amount of exposure. \n        \"\"\"\n\n    def determine_synthetic_exposure_values(self,
        indv_exposures):\n        \"\"\"\n        :param indv_exposures: a list of
        exposures as generated by \n        generate_exposure_list()\n        :return:
        exposure values as a dictionary\n        \"\"\"\n        # TODO: Look into
        this further.\n        # Check if there is a better way to express the rounding
        of these variables.\n        return {\n            ''arsenic'': round(indv_exposures[0],
        4),\n            ''pm25'': round(indv_exposures[1], 4),\n            ''unhewn'':
        round(indv_exposures[2], 4),\n            ''formaldehyde'': round(indv_exposures[3],
        4),\n            ''carcinogenic_paht'': round(indv_exposures[4], 4),\n            ''non_carcinogenic_paht'':
        round(indv_exposures[5], 4),\n            ''low_birth_weight'': round(indv_exposures[6],
        4),\n            ''depression'': round(indv_exposures[7], 4)\n        }\n\n    def
        create_population(self):\n        \"\"\"\n        Creates a population, either
        by synthetically generating exposure values,\n        or by using an external
        file.\n        :return: a list of dictionaries, where each dictionary is an
        individual,\n        with exposure values.\n        \"\"\"\n        if self.use_external_exposures:\n            individuals
        = [\n                self.create_individual(indv_exposures, indv)\n                for
        indv, indv_exposures in enumerate(self.external_exposures)\n            ]\n        else:\n            synthetic_ex","logprobs":null,"finish_reason":"length"}],"usage":{"prompt_tokens":1,"total_tokens":513,"completion_tokens":512,"estimated_cost":0.0004617}}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '2734'
      Content-Type:
      - application/json
      Date:
      - Sat, 14 Dec 2024 03:11:41 GMT
      server:
      - uvicorn
      x-robots-tag:
      - noindex
    status:
      code: 200
      message: OK
version: 1
