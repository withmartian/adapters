interactions:
- request:
    body: '{"messages": [{"role": "user", "content": [{"type": "text", "text": "Hi"},
      {"type": "text", "text": "Hi"}]}], "model": "mistralai/Mixtral-8x7B-Instruct-v0.1"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, br
      connection:
      - keep-alive
      content-length:
      - '158'
      content-type:
      - application/json
      host:
      - api.together.xyz
      user-agent:
      - AsyncOpenAI/Python 1.54.1
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.54.1
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.10
    method: POST
    uri: https://api.together.xyz/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"8e6cde6f6b317ad6-SJC\",\n  \"object\": \"chat.completion\",\n
        \ \"created\": 1732319920,\n  \"model\": \"mistralai/Mixtral-8x7B-Instruct-v0.1\",\n
        \ \"prompt\": [],\n  \"choices\": [\n    {\n      \"finish_reason\": \"eos\",\n
        \     \"seed\": 15198534724144288000,\n      \"logprobs\": null,\n      \"index\":
        0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\":
        \" It seems like you're trying to display two object literals, but the output
        format is not clear. Here's how you can display the contents of two object
        literals in a readable format:\\n\\nObject literal 1:\\n```javascript\\n{\\n
        \ key1: 'value1',\\n  key2: 'value2',\\n  key3: 'value3'\\n}\\n```\\nObject
        literal 2:\\n```javascript\\n{\\n  key4: 'value4',\\n  key5: 'value5',\\n
        \ key6: 'value6'\\n}\\n```\\nReplace `key1`, `value1`, `key2`, `value2`, ...,
        `key6`, `value6` with the actual keys and values of your object literals.\\n\\nIf
        you need to display the object literals as strings, you can use `JSON.stringify()`:\\n\\n```javascript\\nconst
        obj1 = {\\n  key1: 'value1',\\n  key2: 'value2',\\n  key3: 'value3'\\n};\\n\\nconst
        obj2 = {\\n  key4: 'value4',\\n  key5: 'value5',\\n  key6: 'value6'\\n};\\n\\nconsole.log(JSON.stringify(obj1,
        null, 2));\\nconsole.log(JSON.stringify(obj2, null, 2));\\n```\\nThis will
        output:\\n\\n```json\\n{\\n  \\\"key1\\\": \\\"value1\\\",\\n  \\\"key2\\\":
        \\\"value2\\\",\\n  \\\"key3\\\": \\\"value3\\\"\\n}\\n{\\n  \\\"key4\\\":
        \\\"value4\\\",\\n  \\\"key5\\\": \\\"value5\\\",\\n  \\\"key6\\\": \\\"value6\\\"\\n}\\n```\",\n
        \       \"tool_calls\": []\n      }\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"completion_tokens\": 391,\n    \"total_tokens\": 408\n  }\n}"
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8e6cde6f6b317ad6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Fri, 22 Nov 2024 23:58:42 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=2592000; includeSubDomains
      Transfer-Encoding:
      - chunked
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400
      content-length:
      - '1560'
      etag:
      - W/"618-QbTYGmZ1ObbzNkhCcIQzXQ+yyxg"
      retry-after:
      - '2'
      x-api-call-end:
      - '2024-11-22T23:58:42.469Z'
      x-api-call-start:
      - '2024-11-22T23:58:40.571Z'
      x-api-received:
      - '2024-11-22T23:58:40.563Z'
      x-inference-version:
      - v2
      x-ratelimit:
      - 'false'
      x-ratelimit-limit:
      - '100'
      x-ratelimit-limit-tokens:
      - '100000'
      x-ratelimit-remaining:
      - '199'
      x-ratelimit-remaining-tokens:
      - '100000'
      x-ratelimit-reset:
      - '2'
    status:
      code: 200
      message: OK
version: 1
